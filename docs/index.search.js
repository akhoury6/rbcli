var relearn_search_index = [
  {
    "breadcrumb": "",
    "content": "Installation Rbcli is available on rubygems.org. You can add it to your application’s Gemfile or gemspec:\nspec.add_dependency 'rbcli', '~\u003e 0.4'Or install it manually by running:\ngem install rbcliStarting a Project Rbcli includes a tool to quickly create either a gem or a portable executable. Creating either is simple.\nrbcli gem mytoolrbcli portable mytool rbcli portable -a mytool # Adds annotationsOr you can DIY\n#!/usr/bin/env ruby require 'rbcli' Rbcli::Configurate.cli do appname 'mytool' version '0.1.0' helptext \"Something to tell your users about your application in --help\" opt :verbose, 'Verbose output' end Rbcli.command \"mycmd\" do default action do |opts, _params, _args, _config, _env| Rbcli.log.info \"Verbose!\" if opts[:verbose] Rbcli.log.info \"Hello, world!\" end end Rbcli.go!$ mytool -v Verbose! Hello, world!Creating a command There are two types of commands in Rbcli:\nStandard commands let you code the command directly in Ruby Scripted commands provide you with a bash script, where all of the parsed information (params, options, args, config, and env) is shared Standard Commands For gem-based projects, you can use the rbcli helper tool from within the project directory to create new command in the lib/commands/ directory.\nrbcli command mycmdFor portable executables, copy-paste this and edit as needed:\nRbcli.command \"mycmd\" do #default # The default command runs when no others are called description 'Example command' usage \"[--param|--otherparam] name\" helptext \"Text to show in --help\" # Fields: name, description, (short, type, default, required, multi, permitted, prompt) parameter :myparam, 'Another Parameter', type: :string, default: \"Default value\", short: 'p' action do |opts, params, args, config, env| Rbcli.log.info \"Top-level CLI Options: \" + opts.to_s Rbcli.log.info \"Parameters: \" + params.to_s Rbcli.log.info \"Arguments on the CLI: \" + args.to_s Rbcli.log.info \"The config: \" + config.to_s Rbcli.log.info \"Environment variables: \" + env.to_s end endThis will let you run it by calling:\nmytool mycmd (--myparam|-p)Scripted Commands To create a new scripted command for a gem project, run:\nrbcli command -s mycmdYou will then find two new files:\nThe command declaration under lib/commands/ The script code under lib/commands/scripts/ For portable executables, just use the command block above but replace the action block with either inline_script or external_script:\nRbcli.command \"mycmd\" do description \"example script command\" # external_script vars: {}, path: \"./test.sh\" inline_script vars: { foo: 'bar!!!' }, inline: \u003c\u003c~INLINE log \"Top-level CLI Options: $(rbcli opts .)\" log \"Parameters: $(rbcli params .)\" log \"Arguments on the CLI: $(rbcli args .)\" log \"Config: $(rbcli config .)\" log \"Environment Variables: $(rbcli env .)\" log \"Custom Var from command: $(rbcli vars .foo)\" log \"Same variable, in environment: ${FOO}\" log \"Log levels can also be set\", \"warn\" INLINENote that Rbcli will automatically inject a helper script into your script to allow the above integration. The rbcli shortcut in the script is a wrapper around jq (which you must have istalled), and all of it’s syntax applies.\nTop-Level Config Application Information Declare some basic information about your application. This information is used by Rbcli for certain features, including generating --help documentation for your application, and for perofming autoupdate checks.\nThis is also where opt declarations go, for parsing options the command line.\nRbcli::Configurate.cli do appname File.basename($0) author `Your Name` # Can also be an %w(array of names) email your@email.com version Tester::VERSION copyright_year 2024 license 'None' helptext \"This text shows up in `#{File.basename($0)} --help`\" opt :verbose, \"Twice or more enables very-verbose output\", multi: true endCLI Options Rbcli::Configurate.cli do opt :myopttion, 'Description', long: 'myoption', short: 'm', type: :string, required: false, multi: false, permitted: nil end long: The --long-form on the command line (Default: name) short: The -short form on the command line (Default: first letter of name) type: :boolean, :float, :integer, :string, :io, :date (Default: :boolean) Can also be plural to accept a comma-deliminated list required: Stop execution if not provided (Default: false) multi: Opt can be provided multiple times on the command line, such as -vvv If used with a :boolean type, it will count how many times the opt was provided permitted: Array of allowed values Usage Rbcli.command \"mycmd\" do action do |opts, _params, _args, _config, _env| Rbcli.log.info \"Top-level CLI Options: \" + opts.to_s end endLogger Configuration Rbcli::Configurate.logger do logger target: :stdout, level: :info, format: :display format :foo, Proc.new { |severity, datetime, progname, msg| \"Foo! \" + msg } end Valid targets are: :stdout, :stderr, /path/to/a/file, or an IO or StringIO object Default: :stdout Valid levels are: :debug, :info, :warn, :error, :fatal, :unknown, :any Default: :info Valid formats are: :display, :simple, :full, :ruby, :json, :apache, :lolcat Default: :display Note: The display format is intended for on-screen use by end users, and don’t appear as typical logs. If a custom format is provided (like above) it will be the one selected.\nUsage # Rbcli.log.level \"message\", \"module\" -- The module is optional Rbcli.log.debug \"Example Debug Message (change your log level to see this!)\", \"MSGS\" Rbcli.log.info \"Example Info Message\", \"MSGS\" Rbcli.log.warn \"Example Warning Message\", \"MSGS\" Rbcli.log.error \"Example Error Message\", \"MSGS\" Rbcli.log.fatal \"Example Fatal Message\", \"MSGS\" Rbcli.log.unknown \"Example Unknown Message\", \"MSGS\" Rbcli.log.target STDERR # Rbcli.log.format :json # Change settings mid-execution Rbcli.log.level :debug #Config Files Configuration Rbcli::Configurate.config do ##### Config (Optional) ##### # The built-in config will automatically pull in a config file to a hash and vice versa # It can either be used immutably (as user-defined configuration) and/or to store application state # # file location: \u003cstring\u003e or \u003carray\u003e (Required) Provide either a specific config file location or a hierarchy to search # type: (:yaml|:json|:ini|:toml|:null) (Optional) Select which backend/file format to use. If the file has an associated extension (i.e. '.yaml') then this can be omitted. # schema_location: \u003cstring\u003e (Optional) The file location of a JSON Schema (https://json-schema.org). If provided, the config will automatically be validated. (default: nil) # save_on_exit: (true|false) (Optional) Save changes to the config file on exit (default: false) # create_if_not_exists: (true|false) (Optional) Create the file using default values if it is not found on the system (default: false) # suppress_errors: (true|false) (Optional) If set to false, the application will halt on any errors in loading the config. If set to true, defaults will be provided (default: true) file location: ['./tester.yaml', '~/.tester.yaml', '/etc/tester.yaml'], type: :yaml, schema_location: nil, save_on_exit: false, create_if_not_exists: false, suppress_errors: true ##### Banner (Optional) ##### # Define a banner to be placed at the top of the config file. # Note that the banner will only be written to backends that support comments (:yaml, :ini, and :toml). banner \u003c\u003c~BANNER This text appears at the top of the config file when using a backend that supports comments. Tell the user a bit about what they're doing here. BANNER ## Config Structure \u0026 Defaults (Optional) # Set defaults for your config values. # # Defaults set here will be provided to your application if the values are missing in the config. # They will also be used to create new config files when the flag `create_if_not_exists` is set above. # will be written to a config file, along with the helptext and/or short descriptions. group :group1 setting :enable_logins, default: true endUsage Rbcli.command \"mycmd\" do action do |_opts, _params, _args, config, _env| Rbcli.log.info \"Config: \" + config.to_s end endEnvironment Variable Parsing Configuration Rbcli::Configurate.envvars do ##### Environment Variable Parsing (Optional) ##### # The envvars module can pull in all environment variables with a given # prefix and organize them into a hash structure based on name. # It will also parse the string values and convert them to the proper type (Integer, Boolean, etc) # Any values set here will be treated as defaults and made available when a variable is missing # # For example, these two environment variables: # TESTER_TERM_HEIGHT=40 # TESTER_TERM_WIDTH=120 # Would be declared here as: # prefix 'TESTER' # envvar 'TERM_HEIGHT', 40 # envvar 'TERM_WIDTH', 120 # And get loaded into the env hash as: # { term: { height: 40, width: 120 } } # # If the prefix is unset or equal to nil, the environment variables specified here will # be loaded without one. prefix 'TESTER' envvar 'DEVELOPMENT', false endUsage Rbcli.command \"mycmd\" do action do |_opts, _params, _args, _config, env| Rbcli.log.info \"Environment Variables: \" + env.to_s end endHooks Rbcli::Configurate.hooks do ##### Hooks (Optional) ##### # These hooks are scheduled on the Rbcli execution engine to run # Pre- and Post- the command specified. They are executed after # everything else has been initialized, so the runtime configuration # values are all made available, as they will appear to the command. # # These are good for parsing and/or applying transformations on the # configuration before passing them to the command, and for cleaning # up your environment afterwards. pre_execute do |opts, params, args, config, env| Rbcli.log.info \"I'm about to run a command...\" end post_execute do |opts, params, args, config, env| Rbcli.log.info \"I'm done running the command!\" end endUpdate Checker Rbcli::Configurate.updatechecker do ##### Update Check (Optional) ##### # The application can warn users when a new version is released # Checks can be done either by rubygems or by a Github repo # Private servers for Github (enterprise) are supported # # Setting force_update to true will halt execution until it is updated # # For Github, an access_token is required for private repos. See: https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens gem 'tester', force_update: false, message: 'Please run `gem update tester` to upgrade to the latest version.' github 'repo/name', access_token: nil, enterprise_hostname: nil, force_update: false, message: 'Please download the latest version from Github' endDevelopment and Contributing For more information about development and contributing, please see the Official Development Documentation\nLicense The gem is available as open source under the terms of the MIT license.\nFull Documentation You can find the Official Documentation for Rbcli Here.",
    "description": "Installation Rbcli is available on rubygems.org. You can add it to your application’s Gemfile or gemspec:\nspec.add_dependency 'rbcli', '~\u003e 0.4'Or install it manually by running:\ngem install rbcliStarting a Project Rbcli includes a tool to quickly create either a gem or a portable executable. Creating either is simple.\nrbcli gem mytoolrbcli portable mytool rbcli portable -a mytool # Adds annotationsOr you can DIY\n#!/usr/bin/env ruby require 'rbcli' Rbcli::Configurate.cli do appname 'mytool' version '0.",
    "tags": [],
    "title": "Quick Reference",
    "uri": "/rbcli/quick_reference/index.html"
  },
  {
    "breadcrumb": "Development",
    "content": " Contributing to RBCli is the same as most open source projects:\nFork the repository Create your own branch Submit a pull request when ready That’s all there is to it! We’ve also kept our acceptance criteria pretty simple, as you’ll see below. Feel free to submit a pull request even if you don’t meet it if you would like your code or feature to be reviewed first; we do want to be mindful of your time and will review submissions before they are polished.\nDevelpment Mode To allow for easy development, Rbcli has a development mode which allows applications generated from the Rbcli tool to include Rbcli from a local folder instead of the default gem path. To use it, add the following to your shell’s profile (typically ~/.profile):\nexport RBCLI_DEVELOPMENT='true' alias rbcli='/path/to/rbcli/exe/rbcli'Code Acceptance Criteria Tests All code changes and additions must have associated tests updated and/or added to test both the success and failure cases of the new code.\nTo run the suite of tests locally, just run rake spec\nTabs, Not Spaces Please, and thanks. We all like to use different indentation levels and styles, and this will keep us consistent between editors.\nFor filetypes where tabs are not supported (such as yaml), please stick to using two (2) spaces.\nDocumentation for User Features For any modification that alters the way RBCli is used – additional features, options, keyword changes, behavioral changes, and the like – the documentation will need to be updated as well. The process has been made as painless as possible.\nRBCli’s documentation is a collection of markdown files that have been compiled into a static site using Hugo and the Relearn Theme. You can install it by running:\nbrew install hugo All of the source files are in docs-src/content. If adding a new page, make sure that an appropriate weight is set in the header so that it shows up in the correct order on the site. You can preview your changes with:\nrake docserverWhen the changes are ready to be committed, compile the static site to be commited along with the code:\nrake docsNote: This command will also pull in and modify/add to some of the other documentation files (including README.md, LICENSE.md, CONTRIBUTING.md, CODE_OF_CONDUCT.md, and CHANGELOG.md) if there are any updates to them. If you are changing any of this documentation, make sure that your changes are not getting overwritten.\nDeprecations If a feature needs to be deprecated, RBCli has a built-in deprecation message feature. Code/method removal should only happen on major version releases, as doing so will break backwards compatibility. You can leverage it by calling the following code when a deprecated command is called:\nRbcli::DeprecationWarning.new offending_object, warn_at: nil, deprecate_at: nil, message: nilSo, for example:\nRbcli::DeprecationWarning.new( 'Rbcli::Configurate.me', # This can also be an object -- 'self' is a good one warn_at: '0.4.0', deprecate_at: '0.5.0', message: 'Please use `Rbcli::Configurate.cli` instead.' )This will display a warning or error to the user (using the Logger) depending on the version they are using. The text is as follows (depending on log format):\nWarning: WARN || DEPR || DEPRECATION WARNING -- Rbcli::Configurate.me -- This method is scheduled to be removed on version 0.5.0. You are on version 0.4.0. WARN || DEPR || Please use `RBCli::Configurate.cli` as the Configurate block instead. Error: ERROR || DEPR || DEPRECATION ERROR -- Rbcli::Configurate.me -- The removal of this method is imminent. Please update your application accordingly. ERROR || DEPR || Please use `RBCli::Configurate.cli` as the Configurate block instead.Versioning Scheme Rbcli uses Semantic Versioning, following the MAJOR.MINOR.PATCH paradigm. This means that breaking changes will only happen on major version updates.\nMaintainer Notes To install this gem onto your local machine from source, run bundle exec rake install.\nTo release a new version, make sure your local branches are up to date with the upstream repo and do:\nUpdate the version number in the VERSION file in the top level directory, leaving no whitespace or newlines in the file Update the version number and release date in CHANGELOG.md Run the following commands: export RBCLI_VERSION=$(cat './VERSION') bundle exec rake docs bundle exec rake build git add -A git commit -m \"v${RBCLI_VERSION}\" ## The next two lines are if merging the changes locally from a separate branch. ## If github PR's have already been merged and you're working off of master already, ignore them. git checkout master git merge ## Continue here bundle exec rake releaseThis will automatically create a git tag for the version, push git commits and tags, and push the .gem file to rubygems.org. ",
    "description": "Contributing to RBCli is the same as most open source projects:\nFork the repository Create your own branch Submit a pull request when ready That’s all there is to it! We’ve also kept our acceptance criteria pretty simple, as you’ll see below. Feel free to submit a pull request even if you don’t meet it if you would like your code or feature to be reviewed first; we do want to be mindful of your time and will review submissions before they are polished.",
    "tags": [],
    "title": "Contribution Guide",
    "uri": "/rbcli/development/contributing/index.html"
  },
  {
    "breadcrumb": "Development",
    "content": "How Rbcli is Licensed We want to help the developer community build tooling faster and with less work. That’s why Rbcli was built. And let’s face it - most of us aren’t lawyers, and don’t want to worry about legal fine print when building awesome software. That’s why Rbcli is released under the MIT License. So you’re free to use Rbcli as you see fit to write your software.\nMIT License: https://mit-license.org\nThe License You can view the official license for Rbcli here. In case there is any discrepancy between the text below and in that file, the one in that file will take precedence.\nMIT License Copyrighted (c) by Andrew Khoury 2024\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "description": "How Rbcli is Licensed We want to help the developer community build tooling faster and with less work. That’s why Rbcli was built. And let’s face it - most of us aren’t lawyers, and don’t want to worry about legal fine print when building awesome software. That’s why Rbcli is released under the MIT License. So you’re free to use Rbcli as you see fit to write your software.\nMIT License: https://mit-license.",
    "tags": [],
    "title": "License Info",
    "uri": "/rbcli/development/license/index.html"
  },
  {
    "breadcrumb": "Development",
    "content": " Contributor Covenant Code of Conduct Our Pledge We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.\nWe pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.\nOur Standards Examples of behavior that contributes to a positive environment for our community include:\nDemonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include:\nThe use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others’ private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Enforcement Responsibilities Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.\nCommunity leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.\nScope This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.\nEnforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at akhoury@live.com. All complaints will be reviewed and investigated promptly and fairly.\nAll community leaders are obligated to respect the privacy and security of the reporter of any incident.\nEnforcement Guidelines Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:\n1. Correction Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.\nConsequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.\n2. Warning Community Impact: A violation through a single incident or series of actions.\nConsequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.\n3. Temporary Ban Community Impact: A serious violation of community standards, including sustained inappropriate behavior.\nConsequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.\n4. Permanent Ban Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.\nConsequence: A permanent ban from any sort of public interaction within the community.\nAttribution This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\nCommunity Impact Guidelines were inspired by Mozilla’s code of conduct enforcement ladder.\nFor answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.",
    "description": "Contributor Covenant Code of Conduct Our Pledge We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.\nWe pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.",
    "tags": [],
    "title": "Code of Conduct",
    "uri": "/rbcli/development/code_of_conduct/index.html"
  },
  {
    "breadcrumb": "",
    "content": "Want to make Rbcli even better? On behalf of all Rbcli users everywhere, it’s much appreciated. Of course, even if you keep your changes to yourself and don’t contribute back, now that you’re a ninja you’ll likely want to pave your own road forward. This section will guide you how.",
    "description": "Want to make Rbcli even better? On behalf of all Rbcli users everywhere, it’s much appreciated. Of course, even if you keep your changes to yourself and don’t contribute back, now that you’re a ninja you’ll likely want to pave your own road forward. This section will guide you how.",
    "tags": [],
    "title": "Development",
    "uri": "/rbcli/development/index.html"
  },
  {
    "breadcrumb": "Development",
    "content": " Rbcli Changelog 0.4.0 (May 7, 2024) This release is a major refactor! Nearly all of the codebase has been rewritten from the ground up. This brought lots of features and improvements, with a heavy focus on making the framework easier to understand and use. It’s memory footprint has been reduced, and execution time has sped up too.\nNOTE: The license for this version has been changed from GPLv3 to MIT.\nFeatures Console and Logfile Output The Rbcli:msg output and the Logger output have been combined into just the Logger The logger now has more flexibility to be used as either console output or to format everything for a logfile The logger has become a lot more powerful. It can now output in several different preconfigured formats, including :display, :simple, :full, :standard, :json, :apache, and just for fun, a lolcat format. Use :display for output meant to be viewed by a user on a command line. Custom log formats can also be defined just by passing a proc. Configuration for the logger has been simplified to one single line in the Configurate block, and subsequent calls to the block can change the parameters at any time Config Files \u0026 State Storage Rather than these features having two separate features sets, they have been merged into a single feature with the capabilities of both Config files can now be saved at any time, and support additional types. Supported types are now: yaml, json, ini, toml, and null. A banner may be defined that gets written to the config file as a comment when using a backend that supports them Config files have built-in validation when provided a Json-Schema. This validation works on all backends. The primary config is accessed via the Configurate block, where defaults can be set, with options to generate the file automatically if it doesn’t exist and save it if it gets modified Additional configs may be created by instantiating the Rbcli::Config class directly A config may have more than one location/path defined for a hierarchical search. For example, setting the locations to ['~/.config', '/etc/config'] will use the home folder one if available but fall back to the system-wide one if it isn’t A env backend was also added with its own unique integration, to enable automatic parsing of environment variables. This backend is given it’s own config block in Rbcli to inject the environment variable data into commands. Component Architecture \u0026 Execution Engine All features of Rbcli have been designed around a new modular architecture. This has simplified the codebase tremendously, making future work and expansion easier The core of Rbcli is no longer lazy-loaded, allowing for a simpler code base without any detrement to 99% of users Non-essential features remain lazy loaded to keep the memory footprint and startup times down Components can now register methods to be run at any stage of execution within the engine, this way the engine does not need to be modified directly when features are added Commands \u0026 Shell Scripts A command may now be specified as the default, executing it when no other command is specified on the command line. This enables the creation of tools without sub-commands Shell script commands can now be defined inline in a command, rather than requiring a separate file Shell script commands now have their outputs captured and send to the same log/stream that the rest of the program output goes to Shell script commands now integrate tightly with the logger, where messages can be output in different log severities Improvements Tests Tests have been added for much of Rbcli, and more are coming. Now that this project is growing, the goal is to have as much coverage as humanly possible. Performance The engine has been rewritten to speed up execution. Rather than lots of checks and hooks to see which options need to be called, configured options can inject the functions that need to be executed when the engine runs. This significantly reduces execution time Developer Experience Getting started has never been simpler, as the required configuration has been brought down to simply declaring a commmand The projects generated are a lot simpler to use. In addition, the generator has been simplified and is a lot easier to use. Built-in error types have now been created to help describe errors within the rbcli framework itself, along with vastly improved error handling Lots of descriptive logs have been added throughout the framework, making it easy to track what your application is doing. Just set the log level to :debug when initializing the logger Naming conventions are now more in line with the functions being performed Deprecation warnings now get displayed as soon as the code reaches the declaration, as this is more reliable than attempting to aggregate them prior to execution Checks have been added to better ensure that a declared configuration is valid, reducing unexpected errors during usage Documentation The documentation site has been re-created with a fresh Hugo project and a modern, updated version of the theme The code annotations when initializing a new project/executable have been made simpler and clearer All of the documentation has been re-written for the new, updated Rbcli Scripts have been added to help automatically pull in the Changelog and Readme into the site on release The contribution guide and tooling has been updated to make contributing easier More stuff The project initialization code has been simplified, making the resulting files a lot more consistent The update check feature has sane and descriptive default messages that get displayed when an update is available The parsing method has been changed to allow for more control over output. Helptext is now sent over the same stream as all other text, and CLI option parsing errors are captured and sent to logs Options \u0026 parameters now use an enhanced version of the ManageIQ/Optimist gem as a backend. This allows for more options configurations than were previously possible Autoupdates were aptly renamed to update checks since they did not perform the update automatically Custom log formats can now be defined on the fly Bugfixes Under certain conditions, the update check would throw an exception rather than check the version numbers correctly. This has been fixed and the updater now fails silently when it can’t perform a proper comparison. Rather than fail, the update checker now informs the developer when the configuration for update checks is invalid Commands can no longer combine “action”, “extern”, and “script” in the same command, as this could lead to unexpected behavior with remote execution The pre- and post- hooks used to get defined and executed twice under certain circumstances. This has been corrected. Deprecations The Rbcli::msg helper has been deprecated, as it was only making output more complex. Console output has now been integrated into Rbcli.log The Rbcli.Parse call has been changed to Rbcli.go! as it now starts the execution engine The Configurate::me terminology has been changed to Configurate::\u003ccomponent\u003e, where each component gets its own block. 0.3.3 (April 24, 2024) Improvements Tested with Ruby 3.3.0 Updated dependencies for Ruby 3.3.0 Updated dependnecies for Sekeleton projects Added a bundler/inline gemfile on mini and micro skeleton projects to simplify their use Replaced deprecated Trollop gem with its replacement, ManageIQ/Optimist Bugfixes Updated deprecated ERB call for skeleton generation to use new format 0.3.2 (October 28, 2023) Bugfixes Replaced several calls to the deprecated .exists? method with .exist? for compatibility with Ruby 3.2.0 Updated dependencies to latest versions Standardized on version locking to the latest Major version of dependencies rather than the latest Minor ones 0.3.1 (October 19, 2021) Bugfixes Fixed prompt for option value to ignore nil defaults instead of displaying an empty string Skeleton script command script.sh updated to function correctly when development mode is enabled Updated Github Pages links to point to github.io instead of github.com which are being deprecated Updated dependencies, closing the security hole of the gem addressable \u003c= 1.7.0 0.3 (July 31, 2020) Improvements Deprecated Ruby code has been updated to be compatible with Ruby 2.7.x All depedencies have been updated to their latest versions and tested to ensure continued compatibility Old-style execution hooks have been fully deprecated in favor of declaring them in the Rbcli::Configurate.hooks block. To ensure compatibility, save your current hooks and generate new ones using the command rbcli hook Skeleton gemspec now includes spec.required_ruby_version, which matches Rbcli’s requirement Documentation updated to support latest Hugo and theme versions (Hugo 0.74.3 and hugo-theme-learn 2.5.0) Features Rbcli Deprecation Warnings now show the offending line of code to ease updating The $libdir global variable is defined by default in the skeleton project, allwoing easy access to the project’s lib folder 0.2.12 (July 29, 2019) Improvements The base project skeleton now includes an improved structure for the lib/ folder Documentation now uses Hugo instead of MkDocs for site generation. Updated dependencies in project skeleton to latest versions Features Development mode can be enabled by setting the environment variables: RBCLI_ENV=development and RBCLI_DEVPATH=[path to local Rbcli folder] to simplify changes to Rbcli during development. Combined with setting alias rbcli='/path/to/rbcli/exe/rbcli', gem installation is not required for development work 0.2.11 (Feb 27, 2019) Improvements Updated the dependent gem verions to use the latest available versions Bugfixes Fixed the nested triggers of the message I/O system 0.2.8 (Nov 7, 2018) Features Added a standardized message I/O system Improvements Enabled the safe usage of anchors in YAML config files Improved the method of determining the script name to be more portable across OS’es Bugfixes Fixed an error which caused RBCli to crash when using local_state Fixed a bug which caused the rbcli init command to occassionally fail for mini and micro projects Changes Changed the rbcli init helptext to match the order of complexity of projects (standard -\u003e mini -\u003e micro) 0.2.7 (Oct 17, 2018) Improvements Added a dev mode for scripts that allows using a local RBCli copy instead of requiring the gem to be installed Bugfixes Fixed a bug that caused the rbcli tool not to detect project folders correctly. Command parameter prompt: now works when required is set to true. Changes The rbcli init command now initializes into the current working directory instead of creating a new one. Fixed erroneous documentation about the ‘merge’ setting on userspace config. 0.2.5 (Oct 8, 2018) Improvements Added a useful error message when local or remote state is used but not initialized. Bugfixes Fixed a bug in the Github Updater where RBCli crashed when a version tag was not present in the repo. Fixed a bug where deleting a state key would crash Rbcli Fixed a bug where remote state crashed with certain configurations 0.2.4 (Sep 4, 2018) This is a dummy release required to update the License in the Gemspec file. The license has not changed (GPLv3). 0.2.3 (Sep 4, 2018) Features Interactive Commands – Prompt the user for parameters with a given value Improvements Added documentation on logging 0.2.2 (Aug 22, 2018) Features Bugfixes Fixed a bug that caused the logger’s target and level not to be configured properly via the Configurate block. Improvements Lazy-loading has been implemented in optional modules such as autoupdates, remote storage, etc. This means that if you do not enable them in the code, they will not be loaded into memory. This significantly improves loding times for applications. Abstraction system created for configuration. This has significantly simplified the existing codebase and makes future development easier. Deprecation warning system added. This allows for RBCli contributors to notify users of breaking changes that may impact their code. Folder structure has been simplified to ease development. Much of the code has been refactored. Deprecations/Changes The Rbcli module is now RBCli to better match the branding. The original Rbcli module will still work for this current release, with a warning, but future releases will require code changes. Hooks are now defined under the RBCli.Configurate.hooks block instead of RBCli.Configurate.me. The logger is now silent by default. To enable it, it must be configured either via the Configurate block or via the user’s config file. 0.2.1 (Aug 8, 2018) Features Remote Execution added for Script and External commands Bugfixes Fixed a bug that caused RBCli to crash if a direct path mode script’s environment variables were declared as symbols 0.2.0 (Aug 5, 2018) Features CLI tool Autoupdate Enabled; when an upgrade to RBCli is detected, the RBCli CLI tool will notify the developer. Official documentation created and hosted with Github Pages RBCli released under GPLv3 Copyright/License notice displayed via RBCli tool with rbcli license in accordance with GPLv3 guidelines Bugfixes Fixed version number loading for projects Cleaned up command usage help output Fixed script and external command generation Improvements A quick reference guide can now be found in README.md Autoupdate feature now allows supplying a custom message Direct Path Mode for External Commands now Added support for a lib folder in projects, as a place for custom code, which is automatically added to $LOAD_PATH for developers Improved language regarding external commands: Documentation now differentiates between Standard, Scripted, and External Commands Improved language regarding user config files: Now called Userspace Config Options and Parameters now allow specifying the letter to be used for the short version, or to disable it altogether Userspace config can now be disabled by setting the path to nil or removing the declaration Deprecations/Changes Removed deprecated and broken examples from the examples folder ",
    "description": "Rbcli Changelog 0.4.0 (May 7, 2024) This release is a major refactor! Nearly all of the codebase has been rewritten from the ground up. This brought lots of features and improvements, with a heavy focus on making the framework easier to understand and use. It’s memory footprint has been reduced, and execution time has sped up too.\nNOTE: The license for this version has been changed from GPLv3 to MIT.",
    "tags": [],
    "title": "Changelog",
    "uri": "/rbcli/development/changelog/index.html"
  },
  {
    "breadcrumb": "",
    "content": "My Fellow Coder,\nI’m glad to see you are interested in Rbcli. I’d like to introduce myself. My name is Andrew, and I’ve been a technologist since 1992 when my father bought our first family computer – a 486DX2 which ran at 66Mhz (33Mhz if you turned off the ’turbo’ button) and came with MS DOS 5.0, QBasic, and a game already coded in it called Nibbles (if you care to see the code, die 5 times and don’t play again). I didn’t like that the game forced my name to be “Sammy”, and thought, “hey, if I can see the code, can’t I change it?”. So I did what any annoyed child would do and learned to code so I could do just that. I’d tell you what I changed it to, but I was so proud of myself for this simple feat that I changed it every 30 seconds and couldn’t settle on just one name. Then I performed my first ever hack, and figured out how to go through walls without dying. All of a sudden the world seemed limitless.\nI was only a child at the time, but on that day I learned that every “rule” in computing was an artifical construct and could be changed to suit your needs. Thus began my career in tech and my obsession to change the world with it. This is why Rbcli was born.\nRbcli started as a collection of code that I would copy-paste between projects, until one day when I wondered if I could just find a framework that suited me. I couldn’t - in case you hadn’t guessed - so I decided to build my own and give it to the world. I would not have accomplished even half of what I have without the open source community, and this is to be the first of hopefully many contributions back.\nThe features in Rbcli have been chosen from over 25 years of experience writing applications, building features that 3rd parties left out, managing large scale infrastructure, designing embedded systems, integrating enterprise systems, automating CI/CD, scripting my own computers, and so much more. I hope that you can find as much use out of it as I have.\nIf you’d like to get in touch with me at any time, feel free to email me at akhoury@live.com.\nAll the best,\nAndrew\nP.S.: If you really liked Rbcli and want to support it, any amount you can help out with goes a long way.",
    "description": "My Fellow Coder,\nI’m glad to see you are interested in Rbcli. I’d like to introduce myself. My name is Andrew, and I’ve been a technologist since 1992 when my father bought our first family computer – a 486DX2 which ran at 66Mhz (33Mhz if you turned off the ’turbo’ button) and came with MS DOS 5.0, QBasic, and a game already coded in it called Nibbles (if you care to see the code, die 5 times and don’t play again).",
    "tags": [],
    "title": "My Letter To You",
    "uri": "/rbcli/whoami/index.html"
  },
  {
    "breadcrumb": "",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Categories",
    "uri": "/rbcli/categories/index.html"
  },
  {
    "breadcrumb": "",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Tags",
    "uri": "/rbcli/tags/index.html"
  }
]
