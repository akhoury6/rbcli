<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RBCli Documentation</title>
    <link>https://akhoury6.github.io/rbcli/</link>
    <description>Recent content on RBCli Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 20 Jun 2019 15:07:21 -0400</lastBuildDate>
    
	<atom:link href="https://akhoury6.github.io/rbcli/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Contribution Guide</title>
      <link>https://akhoury6.github.io/rbcli/development/contributing/</link>
      <pubDate>Thu, 20 Jun 2019 15:07:21 -0400</pubDate>
      
      <guid>https://akhoury6.github.io/rbcli/development/contributing/</guid>
      <description>Contributing to RBCli is the same as most open source projects:
 Fork the repository Create your own branch Submit a pull request when ready  That&amp;rsquo;s all there is to it! We&amp;rsquo;ve also kept our acceptance criteria pretty simple, as you&amp;rsquo;ll see below. Feel free to submit a pull request even if you don&amp;rsquo;t meet it if you would like your code or feature to be reviewed first; we do want to be mindful of your time and will review submissions before they are polished.</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://akhoury6.github.io/rbcli/tutorial/10-getting_started/</link>
      <pubDate>Thu, 20 Jun 2019 15:07:21 -0400</pubDate>
      
      <guid>https://akhoury6.github.io/rbcli/tutorial/10-getting_started/</guid>
      <description>Welcome to the RBCli getting started tutorial! In this tutorial we&amp;rsquo;re going to cover the basics of RBCli and get a simple application up and running. It should take you between 30-60 minutes to complete, depending on your skill level with Ruby.
As you go throught the tutorial, you can either use the Next and Back buttons on the page to navigate, or use the menu directly.
Supported Ruby Versions You&amp;rsquo;ll need Ruby installed before you can use RBCli.</description>
    </item>
    
    <item>
      <title>License Info</title>
      <link>https://akhoury6.github.io/rbcli/development/license/</link>
      <pubDate>Thu, 20 Jun 2019 15:07:21 -0400</pubDate>
      
      <guid>https://akhoury6.github.io/rbcli/development/license/</guid>
      <description>How RBCli is Licensed We want to help the developer community build tooling faster and with less work. That&amp;rsquo;s why RBCli was built. And let&amp;rsquo;s face it - most of us aren&amp;rsquo;t lawyers, and don&amp;rsquo;t want to worry about legal fine print when building awesome software. That&amp;rsquo;s why RBCli is released under the GPLv3 License. So you&amp;rsquo;re free to use RBCli as you see fit to write free software. If you wish to use RBCli in a commercial offering, please contact me at andrew@blacknex.</description>
    </item>
    
    <item>
      <title>The Project Layout</title>
      <link>https://akhoury6.github.io/rbcli/tutorial/20-project_layout/</link>
      <pubDate>Thu, 20 Jun 2019 15:07:21 -0400</pubDate>
      
      <guid>https://akhoury6.github.io/rbcli/tutorial/20-project_layout/</guid>
      <description>Now we will learn about what an RBCli project looks like and how to start using it.
Project Initialization Types RBCli can initialize a tool in three different modes:
 Project Mode (default) Mini Mode Micro Mode  Project Mode If you&amp;rsquo;ve been following along with the tutorial, you&amp;rsquo;ve already seen Project Mode. An RBCli Project consists of several folders, each of which has a specific function. The RBCli framework handles loading and parsing the code automatically.</description>
    </item>
    
    <item>
      <title>Code of Conduct</title>
      <link>https://akhoury6.github.io/rbcli/development/code_of_conduct/</link>
      <pubDate>Thu, 20 Jun 2019 15:07:21 -0400</pubDate>
      
      <guid>https://akhoury6.github.io/rbcli/development/code_of_conduct/</guid>
      <description>The Contributor Covenant Code of Conduct
Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.
Our Standards Examples of behavior that contributes to creating a positive environment include:</description>
    </item>
    
    <item>
      <title>Your First Command</title>
      <link>https://akhoury6.github.io/rbcli/tutorial/30-your_first_command/</link>
      <pubDate>Thu, 20 Jun 2019 15:07:21 -0400</pubDate>
      
      <guid>https://akhoury6.github.io/rbcli/tutorial/30-your_first_command/</guid>
      <description>Creating the Command Creating the command is straightforward:
rbcli command --name=list #or rbcli command -n list  And there you have it! Now you can try out your command by typing:
./exe/mytool list  Congrats! You should now see a generic output listing the values of several variables. We&amp;rsquo;ll get into what they mean in a bit, but first, let&amp;rsquo;s make the tool&amp;rsquo;s execution a bit easier.
Now that you know your way around a project, its time to create your first command!</description>
    </item>
    
    <item>
      <title>Options, Parameters, and Arguments</title>
      <link>https://akhoury6.github.io/rbcli/tutorial/40-options_parameters_and_arguments/</link>
      <pubDate>Thu, 20 Jun 2019 15:07:21 -0400</pubDate>
      
      <guid>https://akhoury6.github.io/rbcli/tutorial/40-options_parameters_and_arguments/</guid>
      <description>If you&amp;rsquo;re already an experienced coder, you can jump to the last section of this document, the Simplified Reference (TLDR)
Command Line Structure In the previous section, you saw two parts of the RBCli command line structure - the executable followed by the command. However, RBCli is capable of more complex interaction. The structure is as follows:
toolname [options] command [parameters] argument1 argument2...   Options are command line parameters such as -f, or --force.</description>
    </item>
    
    <item>
      <title>Publishing Your Application</title>
      <link>https://akhoury6.github.io/rbcli/tutorial/50-publishing/</link>
      <pubDate>Thu, 20 Jun 2019 15:07:21 -0400</pubDate>
      
      <guid>https://akhoury6.github.io/rbcli/tutorial/50-publishing/</guid>
      <description>RBCli creates projects designed to be easily distributed via either source control or as a gem. We&amp;rsquo;ll go over both methods.
Common Tasks Regardless of where you are publishing, certain tasks need to be accomplished. Namely, preparing the gemspec and the README.
In both files the items that need changing are pretty obvious &amp;ndash; you&amp;rsquo;ll need to fill out your name, email, etc, and replace the placeholder text in the README with something useful to your users.</description>
    </item>
    
    <item>
      <title>Changelog</title>
      <link>https://akhoury6.github.io/rbcli/development/changelog/</link>
      <pubDate>Thu, 20 Jun 2019 15:07:21 -0400</pubDate>
      
      <guid>https://akhoury6.github.io/rbcli/development/changelog/</guid>
      <description>0.2.12 (Unreleased) Improvements  The base project skeleton now includes an improved structure for the lib/ folder Documentation now uses Hugo instead of MkDocs for site generation. Updated dependencies in project skeleton to latest versions  Features  Development mode can be enabled by setting the environment variables: RBCLI_ENV=development and RBCLI_DEVPATH=[path to local Rbcli folder] to simplify changes to Rbcli during development. Combined with setting alias rbcli=&#39;/path/to/rbcli/exe/rbcli&#39;, gem installation is not required for development work  0.</description>
    </item>
    
    <item>
      <title>Automatic Updates</title>
      <link>https://akhoury6.github.io/rbcli/advanced/automatic_updates/</link>
      <pubDate>Thu, 20 Jun 2019 15:07:21 -0400</pubDate>
      
      <guid>https://akhoury6.github.io/rbcli/advanced/automatic_updates/</guid>
      <description>RBCli can automatically notify users when an update is available. If force_update is set (see below), RBCli can halt execution until the user updates their application.
Two sources are currently supported: Github (including Enterprise) and RubyGems.
GitHub Update Check The GitHub update check works best when paired with GitHub&amp;rsquo;s best practices on releases, where new releases are tagged on master with the format vX.X.X. See Github&amp;rsquo;s release documentation to learn more.</description>
    </item>
    
    <item>
      <title>Command Types</title>
      <link>https://akhoury6.github.io/rbcli/advanced/command_types/</link>
      <pubDate>Thu, 20 Jun 2019 15:07:21 -0400</pubDate>
      
      <guid>https://akhoury6.github.io/rbcli/advanced/command_types/</guid>
      <description>RBCli has three different command types:
 Standard Commands (Ruby-based) Scripted Commands (Ruby+Bash based) External Commands (Wrapping a 3rd party application)  This document is provided to be a reference. If you would like an in-depth tutorial, please see Your First Command.
General Command Structure Commands in RBCli are created by subclassing Rbcli::Command. All commands share a certain common structure:
class List &amp;lt; Rbcli::Command # Declare a new command by subclassing Rbcli::Command description &#39;TODO: Description goes here&#39; # (Required) Short description for the global help usage &amp;lt;&amp;lt;-EOF TODO: Usage text goes here EOF # (Required) Long description for the command-specific help parameter :force, &#39;Force testing&#39;, type: :boolean, default: false, required: false # (Optional, Multiple) Add a command-specific CLI parameter.</description>
    </item>
    
    <item>
      <title>Distributed State and Locking</title>
      <link>https://akhoury6.github.io/rbcli/advanced/distributed_state_locking/</link>
      <pubDate>Thu, 20 Jun 2019 15:07:21 -0400</pubDate>
      
      <guid>https://akhoury6.github.io/rbcli/advanced/distributed_state_locking/</guid>
      <description>Distributed Locking allows a Remote State to be shared among multiple users of the application to make writes appear atomic between sessions. To use it, simply set the locking: parameter to true when enabling remote state.
This is how locking works:
 The application attempts to acquire a lock on the remote state when you first access it If the backend is locked by a different application, wait and try again If it succeeds, the lock is held and refreshed periodically When the application exits, the lock is released If the application does not refresh its lock, or fails to release it when it exits, the lock will automatically expire within 60 seconds If another application steals the lock (unlikely but possible), and the application tries to save data, a StandardError will be thrown You can manually attempt to lock/unlock by calling Rbcli.</description>
    </item>
    
    <item>
      <title>Execution Hooks</title>
      <link>https://akhoury6.github.io/rbcli/advanced/hooks/</link>
      <pubDate>Thu, 20 Jun 2019 15:07:21 -0400</pubDate>
      
      <guid>https://akhoury6.github.io/rbcli/advanced/hooks/</guid>
      <description>RBCli provides you with hooks that can be used to have code execute at certain places in the execution chain. These hooks are optional, and do not have to be defined for your application to run.
All hooks will be created in the hooks/ folder in your project.
The Defailt Action Hook The Default hook is called when a user calls your application without providing a command. If the hook is not provided, the application will automatically display the help text (the same as running it with -h).</description>
    </item>
    
    <item>
      <title>Interactive Commands</title>
      <link>https://akhoury6.github.io/rbcli/advanced/interactive_commands/</link>
      <pubDate>Thu, 20 Jun 2019 15:07:21 -0400</pubDate>
      
      <guid>https://akhoury6.github.io/rbcli/advanced/interactive_commands/</guid>
      <description>Why interactive commands? When catering to an audience of users who are not accustomed to scripting, you may want to prompt them for the information directly (the typical CS-101 &amp;lsquo;puts&amp;rsquo; and &amp;lsquo;gets&amp;rsquo; pattern). This can be a lot more straightforward than having to read the help texts of your tool, and trying multiple times to enter all of the required data.
Of course, we want to make sure that scripting with the tool still works well (headless interaction).</description>
    </item>
    
    <item>
      <title>Logging</title>
      <link>https://akhoury6.github.io/rbcli/advanced/logging/</link>
      <pubDate>Thu, 20 Jun 2019 15:07:21 -0400</pubDate>
      
      <guid>https://akhoury6.github.io/rbcli/advanced/logging/</guid>
      <description>Logging with RBCli is straightforward - it looks at the config file for logging settings, and instantiates a single, globally accessible Logger object. You can access it within a standard command like this:
Rbcli::log.info { &#39;These logs can go to STDERR, STDOUT, or a file&#39; }  Enabling Logging To enable logging, simply set the default values in the config/logging.rb file:
log_level :info log_target &#39;stderr&#39;   log_level  You can set the default log level using either numeric or standard Ruby logger levels: 0-5, or DEBUG &amp;lt; INFO &amp;lt; WARN &amp;lt; ERROR &amp;lt; FATAL &amp;lt; UNKNOWN  log_target  This specifies where the logs will be placed.</description>
    </item>
    
    <item>
      <title>Remote Execution</title>
      <link>https://akhoury6.github.io/rbcli/advanced/remote_execution/</link>
      <pubDate>Thu, 20 Jun 2019 15:07:21 -0400</pubDate>
      
      <guid>https://akhoury6.github.io/rbcli/advanced/remote_execution/</guid>
      <description>RBCli can be configured to execute commands on a remote machine via SSH instead of locally.
Currently, only script and extern commands are supported.
Configuration To allow remote execution, go to config/general.rb and change the following line to true:
remote_execution permitted: false  Then, for each command that you would like to enable remote execution for, add the following directive to the command class declaration:
remote_permitted  Usage Your end users can now execute a command remotely by specifying the connection string and credentials on the command line as follows:</description>
    </item>
    
    <item>
      <title>State Storage</title>
      <link>https://akhoury6.github.io/rbcli/advanced/state_storage/</link>
      <pubDate>Thu, 20 Jun 2019 15:07:21 -0400</pubDate>
      
      <guid>https://akhoury6.github.io/rbcli/advanced/state_storage/</guid>
      <description>RBCli supports both local and remote state storage. This is done by synchronizing a Hash with either the local disk or a remote database.
Local State RBCli&amp;rsquo;s local state storage gives you access to a hash that is automatically persisted to disk when changes are made.
Configuration You can configure it in config/storage.rb.
local_state &#39;/var/mytool/localstate&#39;, force_creation: true, halt_on_error: true  There are three parameters to configure it with:
 The path as a string (self-explanatory) force_creation  This will attempt to create the path and file if it does not exist (equivalent to an mkdir -p and touch in linux)  halt_on_error  RBCli&amp;rsquo;s default behavior is to raise an exception if the file can not be created, read, or updated at any point in time If this is set to false, RBCli will silence any errors pertaining to file access and will fall back to whatever data is available.</description>
    </item>
    
    <item>
      <title>User Configuration Files</title>
      <link>https://akhoury6.github.io/rbcli/advanced/user_config_files/</link>
      <pubDate>Thu, 20 Jun 2019 15:07:21 -0400</pubDate>
      
      <guid>https://akhoury6.github.io/rbcli/advanced/user_config_files/</guid>
      <description>RBCli provides built-in support for creating and managing userspace configuration files. It does this through two chains: the defaults chain and the user chain.
Defaults chain The defaults chain allows you to specify sane defaults for your CLI tool throughout your code. This gives you the ability to declare configuration alongside the code, and allows RBCli to generate a user config automatically given your defaults. There are two ways to set them:</description>
    </item>
    
  </channel>
</rss>