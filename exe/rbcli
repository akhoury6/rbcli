#!/usr/bin/env ruby
##################################################################################
#     Rbcli -- A framework for developing command line applications in Ruby      #
#     Copyright (C) 2024 Andrew Khoury <akhoury@live.com>                        #
##################################################################################
BASEDIR = File.expand_path(File.join(File.dirname(__FILE__), ".."))
require File.join(BASEDIR, 'lib', 'rbcli.rb')
require File.join(RBCLI_TOOLDIR, 'helpers.rb')

Rbcli::Configurate.cli do
  appname 'Rbcli'
  author 'Andrew Khoury'
  email 'akhoury@live.com'
  version Rbcli::VERSION
  copyright_year 2024
  license 'MIT'
  helptext "Helptext!"
  opt :version, "Print version and exit", :short => :none
end

Rbcli::Configurate.logger do
  logger target: :stdout,
         level: ENV['RBCLI_DEVELOPMENT'] == 'true' ? :debug : :info,
         format: ENV['RBCLI_DEVELOPMENT'] == 'true' ? :simple : :display
end

Rbcli::Configurate.updatechecker do
  gem 'rbcli', force_update: false, message: "Please run `gem update rbcli` to upgrade to the latest version."
end

Rbcli::Configurate.envvars do
  prefix 'RBCLI'
  envvar 'RBCLI_DEVELOPMENT', false
end

Rbcli.command "portable" do
  description 'Creates a portable Rbcli executable'
  usage "(--(d)ocs|--use-(b)undler|--(f)orce) <application_name>"
  helptext <<~HELPTEXT
    This will initialize a portable Rbcli project in the current directory.

    A single executable file will be created with all of the Rbcli configuration 
    in it. This setup is ideal for creating an executable that can be easily transferred to
    different systems, or for dropping into a pre-existing project.

    If you'd prefer a complete project structure, run `rbcli gem --help` for more information.
  HELPTEXT

  parameter :annotate, "Add annotations and examples for a more guided build"
  parameter :use_bundler, "Use bundler inline for dependencies", short: :b
  parameter :force, "Overwrite files without prompting"

  action do |opts, params, args, config, env|
    if args.first.nil?
      Rbcli.log.error "You must specify a name for the project", 'TOOL'
      Rbcli.log.error "Usage: #{self.usage}", 'TOOL'
      Rbcli::exit 1
    end
    vars = {
      appname: args.first,
      use_bundler: params[:use_bundler],
      development: env[:development],
      showdocs: params[:annotate]
    }
    Rbcli.log.debug "Creating portable executable", 'TOOL'
    Rbcli::ToolHelpers.cp_file File.join(RBCLI_TOOLDIR, 'skeletons', 'portable.rb.erb'),
                               File.join(Dir.getwd, "#{vars[:appname].downcase}"),
                               template_vars: vars, set_executable: true, force: params[:force]
    Rbcli.log.info "Done.", 'TOOL'
  end
end

Rbcli.command "gem" do
  description 'Creates an full Rbcli-based gem project'
  usage "(--(f)orce) <application_name>"
  helptext <<~HELPTEXT
    This will initialize an complete Rbcli project in the current directory.

    First a basic Gem structure is created with bundler, and then the
    Rbcli-specific modifications are layered on top. This is ideal
    for larger applications, or if you already have CI/CD pipelines
    that work with Gems and want to reuse your code

    If you'd prefer a single-file executable script, run `rbcli portable --help` for more information. 
  HELPTEXT

  parameter :force, "Overwrite files without prompting"

  action do |opts, params, args, config, env|
    if args.first.nil?
      Rbcli.log.error "You must specify a name for the project", 'TOOL'
      Rbcli.log.error "Usage: #{self.usage}", 'TOOL'
      Rbcli::exit 1
    end
    vars = {
      appname: args.first,
      use_bundler: params[:use_bundler],
      development: env[:development],
      showdocs: params[:docs]
    }
    project_dir = File.join(Dir.getwd, vars[:appname])
    config_dir = File.join(project_dir, 'lib', 'config')
    command_dir = File.join(project_dir, 'lib', 'commands')
    scripts_dir = File.join(command_dir, 'scripts')
    if File.exist?(project_dir) && params[:force]
      FileUtils.rm_rf(project_dir)
    elsif File.exist?(project_dir) && !params[:force]
      Rbcli.log.info "The project #{vars[:appname]} already exists. Overwrite? (y/n): ", 'TOOL'
      answer = gets.chomp
      answer = { 'y' => true, 'n' => false }[(answer[0] || '').downcase]
      if answer
        Rbcli.log.debug "Deleting #{File.basename(project_dir)}", 'TOOL'
        FileUtils.rm_rf(project_dir)
      else
        return
      end
    end

    # Full options available:
    # `bundle gem --exe --coc --mit --test=rspec/minitest/test-unit --ci=github/gitlab/circle --linter=rubocop/standard <name>`
    Rbcli.log.info "Running bundler gem", 'TOOL'
    `bundle gem --exe --coc #{vars[:appname]}`
    Rbcli.log.debug "Creating Rbcli project identifier", 'TOOL'
    FileUtils.touch(File.join(project_dir), '.rbcli')
    Rbcli.log.debug "Creating additional directories", 'TOOL'
    [config_dir, command_dir, scripts_dir].each { |dir| FileUtils.mkdir_p(dir) }
    FileUtils.touch(File.join(scripts_dir, '.keep'))
    Rbcli.log.debug "Creating executable", 'TOOL'
    Rbcli::ToolHelpers.cp_file File.join(RBCLI_TOOLDIR, 'skeletons', 'gem.rb.erb'),
                               File.join(project_dir, 'exe', "#{vars[:appname].downcase}"),
                               template_vars: vars, set_executable: true, force: true
    Rbcli.log.debug "Creating configs", 'TOOL'
    %w(parser logger config envvars hooks updatechecker).each { |component|
      Rbcli::ToolHelpers.cp_file File.join(RBCLI_LIBDIR, 'components', component, 'template.rb.erb'),
                                 File.join(config_dir, "#{component}.rb"),
                                 template_vars: vars, set_executable: false, force: params[:force] }
    Rbcli.log.debug "Creating commands", 'TOOL'
    %w(command script).each { |cmdtype|
      Rbcli::ToolHelpers.cp_file File.join(RBCLI_LIBDIR, 'components', 'commands', "#{cmdtype}.rb.erb"),
                                 File.join(command_dir, "#{cmdtype}.rb"),
                                 template_vars: vars, set_executable: false, force: params[:force] }
    Rbcli.log.info "Done."
  end
end

Rbcli.command "command" do
  description 'Generate a new command declaration in the current project'
  usage "(--(s)cript|--(f)orce) <application_name>"
  parameter :script, 'Generate a shell-script based command', default: false
  parameter :force, 'Overwrite files without prompting', default: false
  action do |opts, params, args, config, env|
    if args.first.nil?
      Rbcli.log.error "You must specify a name for the command", 'TOOL'
      Rbcli.log.error "Usage: #{self.usage}", 'TOOL'
      Rbcli::exit 1
    end

    unless (project_dir = find_root(Dir.pwd))
      Rbcli.log.error "Not an Rbcli project directory. This command can only be run on projects created using `rbcli gem <project_name>`."
      Rbcli.log.error "If you believe you are receiving this message in error, make sure the `.rbcli` file exists in the current directory."
      return
    end

    command_dir = File.join(project_dir, 'lib', 'commands')
    scripts_dir = File.join(command_dir, 'scripts')
    FileUtils.mkdir_p(command_dir)
    FileUtils.mkdir_p(scripts_dir) if params[:script]
    Rbcli.log.debug "Creating commands", 'TOOL'

    vars = {
      command_name: args.first,
      showdocs: true
    }

    cmdtype = params[:script] ? 'script' : 'command'
    Rbcli::ToolHelpers.cp_file File.join(RBCLI_LIBDIR, 'components', 'commands', "#{cmdtype}.rb.erb"),
                               File.join(command_dir, "#{args.first}.rb"),
                               template_vars: vars, set_executable: false, force: params[:force]
  end

  def find_root path
    # We look for the .rbcli file in the current tree and return the root path
    searchpath = path
    until searchpath.empty?
      return searchpath if File.directory? searchpath and File.exist? "#{searchpath}/.rbcli"
      spath = searchpath.split('/')
      searchpath = (spath.length == 2) ? '/' : spath[0..-2].join('/')
    end
    false
  end
end

Rbcli.command "license" do
  description 'Display license info'
  action do |opts, params, args, config, env|
    Rbcli.log.info "eJxdUk9v2jAUv/Mpnnpqpaibqp12M4kpVkMcOaaMY0gM8RRiZJshvv3ec+na\nTkKK/Px+f81KaChtZ6Zgfs5muTtdvT0M0fRw3z3A7gps6r25wMvgzv4KT9+f\nfsxmtfFHG4J1E9gAg/EGFw++nRCXwd4bA24P3dD6g8kgOminK5yMDwhwu9ja\nyU4HaKFDOdqMA9IEt4+X1htc7qENwXW2JR+9685HM8U2kt7ejibAfRwM3DU3\nxN1DEulNO4KdgO7er+BiIzqP4E2I3nbEkeFSN5578vB+PdqjvSkQPHUQiPQc\nMAH5zODoerunr0mxTufdaMOQQW+JeneOOAw0TG1mlOOb8xDMOBKDRd8p64e7\ntEMqJyo03ipKupfBHb8mwYr2Zz+hpEmY3mFlSfG36SJNaH3vxtFdKFrnpt5S\nooAPq/Gq3bk/JmVJ8WByEa2+WaAHOH286u0qDC1635lbYaiL9baf4niSDxEf\n3mL3J+eT3v8xH1F/yaGRC71hioNooFbyVRS8gDvW4Pkug43QS7nWgBuKVXoL\ncgGs2sKLqIoM+K9a8aYBqUCs6lJwnIkqL9eFqJ5hjrhK4h9ZrIRGUi2BBG9U\ngjdEtuIqX+KRzUUp9DaDhdAVcS6QlEHNlBb5umQK6rWqZcNRvkDaSlQLhSp8\nxSv9iKo4A/6KB2iWrCyTFFuje5X85bLeKvG81LCUZcFxOOfojM1L/iaFofKS\niVUGBVuxZ55QEllUWru52yx5GqEew1+uhawoRi4rrfCYYUql/0E3ouEZMCUa\nKmShJNJTnYiQiQRxFX9joarhy4vgCp3XDf/wUnBWIldD4M/Lj38BVjZX4w==".decompress, 'TOOL' ### LICENSE.txt
  end
end

Rbcli.go!