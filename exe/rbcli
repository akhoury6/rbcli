#!/usr/bin/env ruby

require "#{File.dirname(__FILE__)}/../lib/rbcli.rb"

Rbcli::Configurate.me do
	scriptname __FILE__.split('/')[-1]
	version Rbcli::VERSION
	description 'RBCli initialization tool'
end

require "#{File.dirname(__FILE__)}/../lib/rbcli-tool.rb"

class Docs < Rbcli::Command
	description 'Show Documentation (Beta)'

	action do
		readme = "#{File.dirname(__FILE__)}/../README.md"
		begin
			CLIMarkdown::Converter.new([readme])
		rescue Errno::EPIPE
			# Empty
		end
	end
end

class Init < Rbcli::Command
	description 'Initialize a skeleton RBCli project.'
	usage <<-EOF
This will generate a new project structure under the current directory. Use -t to specify the type:


Standard: A complete RBCli project structure. Recommended for most applications, it provides
          a framework for organizing code and creating a gem to be installed/distributed.

Mini:     A single-file RBCli project. All features are supported, but project structure is left to the developer.
          Recommended for smaller applications, or for integrating RBCli into an existing application.

Micro:    A single-file, minimal RBCli project. Similar to a mini project, but only the minimal required code is
          generated. Recommended for rapid prototyping of scripts, for advanced users only.
	EOF

	parameter :name, 'Name of project to generate', type: :string, required: true
	parameter :type, 'Specify project type', type: :string, permitted: %w(standard micro mini), default: 'standard'
	parameter :description, 'A description of the project', type: :string, default: 'TODO: Description goes here'

	action do |params, args, global_opts, config|
		dest = "#{Dir.pwd}/#{params[:name]}"

		# Prepare template vars
		template_vars = {
				cmdname: params[:name],
				description: params[:description],
				rbcli_version: Rbcli::VERSION
		}

		proj = RBCliTool::Project.new(dest, template_vars)

		if proj.exists?
			RBCliTool.continue_confirmation "The project or file #{params[:name]} already exists; contents will be overwritten."
			FileUtils.rm_rf dest
		end

		case params[:type]
		when 'micro' # Micro: Single File, simplified
			puts "\nInitialization Complete!\n" if proj.create_micro

		when 'mini' # Mini: Single File
			puts "\nInitialization Complete!\n" if proj.create_mini

		else # Standard; full project structure
			if proj.create
				puts "\nInitialization Complete!\n"
			else
				puts "\nAn RBCli Project already exists in the current directory tree at: #{proj.exists?}. Aborting.\n"
			end

		end # END case params[:type]

	end
end

class Command < Rbcli::Command
	description 'Generate an Rbcli Command under the current project'
	usage <<-EOF
This will generate a new command under the current RBCli project. Please run this command from within the project's
directory structure.
	EOF

	parameter :name, 'Name of command to generate', type: :string, required: true
	parameter :description, 'A short description of the command', type: :string, default: 'TODO: Description goes here'
	parameter :usagetext, 'Usage help text for the command', type: :string, default: 'TODO: Usage text goes here'

	action do |params, args, global_opts, config|
		# First we check that we are working within a project folder
		project_root = RBCliTool::Project.find_root(Dir.pwd)
		RBCliTool.exit_with_error("Can't find the project root in the current path. Please `cd` to your project's directory before running this command, and ensure that the `.rbcli` file is present in its root path.") unless project_root

		# Prepare template vars
		template_vars = {
				name: params[:name],
				description: params[:description],
				usage_text: params[:usagetext],
				rbcli_version: Rbcli::VERSION
		}

		generator = RBCliTool::Generator.new(:command, project_root, template_vars)
		generator.run
	end
end


Rbcli.parse
