#########################
## Command Declaration ##
#########################
# With rbcli, commands are declared by subclassing
# from Rbcli::Command. The name of the class will be
# the command that is available to the user.
#########################
class <%= @vars[:name].capitalize %> < Rbcli::Command                                 # Declare a new command by subclassing Rbcli::Command
	description '<%= @vars[:description] %>'                                            # (Required) Short description for the global help
	usage <<-EOF
<%= @vars[:usage_text] %>
EOF
	parameter :force, 'Force testing', short: 'f', type: :boolean, default: false, required: false  # (Optional, Multiple) Add a command-specific CLI parameter. Uses the same format as options (see application/options.rb for help)

	config_default :myopt2, description: 'My Option #2', default: 'Default Value Here'  # (Optional, Multiple) Specify an individual configuration parameter and set a default value. These will also be included in generated user config.
                                                                                      # Alternatively, you can simply create a yaml file in the `default_user_configs` directory in your project that specifies the default values of all options

	action do |params, args, global_opts, config|                                       # (Required) Block to execute if the command is called.
		Rbcli::log.info { 'These logs can go to STDERR, STDOUT, or a file' }              # Example log. Interface is identical to Ruby's logger
		puts "\nArgs:\n#{args}"                    # Arguments that came after the command on the CLI (i.e.: `mytool test bar baz` will yield args=['bar', 'baz'])
		puts "Params:\n#{params}"                  # Parameters, as described through the option statements above
		puts "Global opts:\n#{global_opts}"        # Global Parameters, as descirbed in the Configurate section
		puts "Config:\n#{config}"                  # Config file values
		puts "LocalState:\n#{Rbcli.local_state}"   # Local persistent state storage (when available) -- if unsure use Rbcli.local_state.nil?
		puts "RemoteState:\n#{Rbcli.remote_state}" # Remote persistent state storage (when available) -- if unsure use Rbcli.remote_state.nil?
		puts "\nDone!!!"
	end
end